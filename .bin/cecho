#!/usr/bin/env bash

# MIT License
# 
# Copyright (c) 2022 Marek Bogusovsky
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

shopt -s extglob
 
usage() {
    [ -t 1 ] && BOLD="$(tput bold)"
    [ -t 1 ] && RESET="$(tput sgr0)"
    echo "Usage: $(basename "${BASH_SOURCE[1]}") [OPTIONS]... [STRING]..."
    echo "Options:"
    echo "  ${BOLD}-n${RESET}  Do not output the trailing newline"
    echo "  ${BOLD}-e${RESET}  Enable interpretation of backslash escapes"
    echo "  ${BOLD}-E${RESET}  Disable interpretation of backslash escapes (default)"
    echo "  ${BOLD}-c <black|red|green|yellow|blue|magenta|cyan|white|orange|[0-9]+>${RESET}  Text color"
    echo -e "    [0-9]+ stands for an unsigned integer used as an argument to tput setaf <number>\\n"
    echo "  ${BOLD}-B${RESET}  Print in bold"
    echo "  ${BOLD}-u${RESET}  Underline text"
    echo "  ${BOLD}-i${RESET}  Inverse foreground and background colors"
    echo "  ${BOLD}-a${RESET}  Always colorize the output even when not outputting to a tty"
    echo "  ${BOLD}-h${RESET}  Print this message"
}

toSetafArg() {
    case "${1,,}" in # lowercase
        (black) echo 0;;
        (red) echo 9;;
        (green) echo 10;;
        (yellow) echo 11;;
        (blue) echo 12;;
        (magenta) echo 13;;
        (cyan) echo 14;;
        (white) echo 15;;
        (orange) echo 208;;
        (+([0-9])) echo "${1}";;
        (*) return 1 ;;
    esac
}

declare -a ECHO_ARGS
declare -a MODS
while getopts "neEc:Buiah" OPTION; do
    case $OPTION in
        n) ECHO_ARGS+=("-n");;
        e) ECHO_ARGS+=("-e");;
        E) ECHO_ARGS+=("-E");;
        c) MODS+=("setaf" "$(toSetafArg "${OPTARG}")") || { usage 2>&1; exit 1; };;
        B) MODS+=("bold");;
        u) MODS+=("smul");;
        i) MODS+=("rev");;
        a) COLOR_ALWAYS=1;;
        h) usage; exit;;
        *) usage; exit 1 ;;
    esac
done
shift $((OPTIND-1))

[ ${#MODS[@]} -ne 0 ] && MODSTR="$(tput "${MODS[@]}")"

if [ -t 1 ] || [ -n "${COLOR_ALWAYS}" ]; then
    echo "${ECHO_ARGS[@]}" "${MODSTR}$*$(tput sgr0)"
else
    echo "${ECHO_ARGS[@]}" "$@"
fi

