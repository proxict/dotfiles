#!/bin/bash

[ -z "${1}" ] && echo "Usage: $(basename "${BASH_SOURCE[1]}") <URL>" >&2 && exit 1

cd "${HOME}/rust_programming/rbw" || exit 1

# Thanks @madmurphy: https://stackoverflow.com/a/59592881/3421618
# Not surprised treesitter doesn't work well here...
#
# SYNTAX:
#   catch STDOUT_VARIABLE STDERR_VARIABLE COMMAND [ARG1[ ARG2[ ...[ ARGN]]]]
function catch() {
    {
        IFS=$'\n' read -r -d '' "${1}";
        IFS=$'\n' read -r -d '' "${2}";
        (IFS=$'\n' read -r -d '' _ERRNO_; return ${_ERRNO_});
    } < <((printf '\0%s\0%d\0' "$(((({ shift 2; "${@}"; echo "${?}" 1>&3-; } | tr -d '\0' 1>&4-) 4>&2- 2>&1- | tr -d '\0' 1>&4-) 3>&1- | exit "$(cat)") 4>&1-)" "${?}" 1>&2) 2>&1)
}

function print_password() {
    jq -r ".data.password" <<< "$1"
}

function handle_multiple_results() {
    ENTRIES_STR="$(grep -Eo 'multiple entries found: .*' <<< "$1" | cut -c 25-)"
    oIFS="$IFS"
    IFS=", "
    declare -a ENTRIES=(${ENTRIES_STR})
    IFS="$oIFS"
    unset oIFS
    for entry in "${ENTRIES[@]}"; do
        echo "Username: ${entry}"
    done
}

catch RBW_STDOUT RBW_STDERR cargo run --bin rbw get --raw "${1}" && print_password "${RBW_STDOUT}" || handle_multiple_results "${RBW_STDERR}"

